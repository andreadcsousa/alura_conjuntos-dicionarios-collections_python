# -*- coding: utf-8 -*-
"""Trabalhando com dicionários

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P5wL-R_R9XIzoaM0UX3Azg5gopuhZch9
"""

from collections import Counter         # importa o contador
from collections import defaultdict     # importa o dicionário padrão

meu_texto = "Bem vindo meu nome é Guilherme eu gosto muito de nomes e tenho o meu cachorro e gosto muito de cachorro"
meu_texto.split()

set(meu_texto.split())

"""Mapeando elementos do conjunto de strings:"""

aparicoes = {           # forma mais simples e direta de criar um dicionário
    "Guilherme": 1,    # relação chave : valor
    "cachorro": 2,
    "nome": 2,
    "vindo": 1
}

type(aparicoes)

aparicoes["Guilherme"]

aparicoes["cachorro"]

aparicoes["xpto"]

aparicoes.get("xpto", 0)

aparicoes.get("cachorro", 0)

# outra forma de criar um dicionário
aparicoes = dict(Guilherme=2, cachorro=1)
aparicoes

aparicoes = {
    "Guilherme": 1,
    "cachorro": 2,
    "nome": 2,
    "vindo": 1
}

aparicoes["Carlos"] = 1     # adiciona um elemento no dicionário

aparicoes

aparicoes["Carlos"] = 2     # altera um elemento do dicionário

aparicoes

del aparicoes["Carlos"]     # remove um elemento do dicionário

aparicoes

"cachorro" in aparicoes     # in busca as chaves, não os valores

"Carlos" in aparicoes

for elemento in aparicoes:  # retorna todas as chaves
    print(elemento)

for elemento in aparicoes.keys():   # mostra as chaves
    print(elemento)

for elemento in aparicoes.values():  # mostra os valores
    print(elemento)

1 in aparicoes.values()

for elemento in aparicoes.keys():   # mostra chave e valor
    print(elemento, aparicoes[elemento])

for elemento in aparicoes.keys():   # outra forma de mostrar chave e valor
    valor = aparicoes[elemento]
    print(elemento, valor)

for elemento in aparicoes.items():      # mais uma forma de mostrar chave e valor
    print(elemento)                     # mais elegante, quando traz em tuplas

for chave, valor in aparicoes.items():  # mostra chave e valor desempacotados
    print(chave, "=", valor)

["palavra {}".format(chave) for chave in aparicoes.keys()]

meu_texto = "Bem vindo meu nome é Guilherme eu gosto muito de nomes e tenho o meu cachorro e gosto muito de cachorro"
meu_texto.lower()   # mostra o texto em minúsculo

meu_texto = "Bem vindo meu nome é Guilherme eu gosto muito de nomes e tenho o meu cachorro e gosto muito de cachorro"
meu_texto = meu_texto.lower()   # aplica o texto em minúsculo
meu_texto.split()               # quebra o texto

meu_texto = "Bem vindo meu nome é Guilherme eu gosto muito de nomes e tenho o meu cachorro e gosto muito de cachorro"
meu_texto = meu_texto.lower()

aparicoes = {}                              # cria um dicionário vazio

for palavra in meu_texto.split():           # para cada uma das palavras
    ate_agora = aparicoes.get(palavra, 0)   # busca as palavras
    # conta quantas vezes a palavra aparece
    aparicoes[palavra] = ate_agora + 1

aparicoes


aparicoes = defaultdict(int)            # substitui o get

for palavra in meu_texto.split():
    ate_agora = aparicoes[palavra]
    aparicoes[palavra] = ate_agora + 1

aparicoes

int()   # quando não passa valor, retorna zero

dicionario = defaultdict(int)
dicionario['guilherme']

dicionario['guilherme'] = 15
dicionario['guilherme']

aparicoes = defaultdict(int)

for palavra in meu_texto.split():
    aparicoes[palavra] += 1

aparicoes   # funciona como um contador de palavras de um texto


class Conta:
    def __init__(self):
        print("Criando uma conta")


contas = defaultdict(Conta)
contas[15]

contas[17]

# O Counter tem zero como valor padrão e conta objetos dentro de um conjunto em que
# elementos são armazenados como chaves e contagens são armazenadas como valores

aparicoes = Counter()

for palavra in meu_texto.split():
    aparicoes[palavra] += 1

aparicoes

# o contador aceita um iterável, facilitando a escrita do código
aparicoes = Counter(meu_texto.split())
aparicoes
